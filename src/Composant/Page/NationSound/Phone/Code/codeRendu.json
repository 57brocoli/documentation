{
    "titre" : "Code côté rendu",
    "section" : [
        {
            "titre" : "Operateur ternaire",
            "content" : {
                "introduction" : [
                    "L'operateur ternaire de JavaScript est une facon d'ecrire une conditions de facon plus condensé. Il s'agit d'une syntaxe basée sut l'operateur ternaire \" ? \" qui est un opérateur de comparaison. Elle permet entre autre d'écrire une condition sur une ligne, ce qui permet d'avoir un code plus court et plus gagné du temps."
                ],
                "imgConditionIf": "/documentation/NS_VersionDescktop/Code/rendu/conditionIf.png",
                "imgTernaire": "/documentation/NS_VersionDescktop/Code/rendu/ternaireInitial.png",
                "utilisation":[
                    {
                        "nom": "Pour la methode channel",
                        "lieux" : "Page1.js / Page2.js",
                        "img" : ["/documentation/NS_VersionPhone/Code/Rendu/ternaire1.png"],
                        "explication" : [
                            "Ici il sagit du fichier 'Page1.js'. Ce conposant représente la 1er couche de navigation.",
                            "Son utilisation est simple :",
                            "Avec le paramêtre transmit au composant, les conditions vont être parcourut une à une. Le paramêtre peut être : \"pageBilleterie, pageProgramme, pageInformation, pageSponsor, pageApropos\"",
                            "Une fois qu'une des condtions est validée elle est exécutée.",
                            "La condition vas donc charger le composant qui suit les \" && \". "
                        ]
                    },
                    {
                        "nom": "Afficher des erreurs",
                        "lieux" : "RequesteForm.js",
                        "img" : ["/documentation/NS_VersionPhone/Code/Rendu/ternaire2.png"],
                        "explication" : [
                            "On retrouve un autre exemple dans les formulaires notament la gestion des erreurs. L'objectif est d'afficher à l'ecran les champs manquant en indiquant l'erreur en question.",
                            "Le code opère de cette facon :",
                            "Dans le rendu de la fonction nous avons les champs sous la balise \" TextInput \". Sous chaque champ les operateurs ternaires afficherons les erreurs si jamais les conditions ne sont pas remplit au moment ou l'utilisateur clique sur \" envoyer \"."
                        ]
                    }
                ]
            }
        },
        {
            "titre" : "Traitement des données",
            "content" : {
                "introduction" : [
                    "Dans cette partie de la documentation nous allons parler de la facon dont les données provenant de l'api sont traitées. Il est important de noter que les données traitées proviennent de l'api ApiPlatform. Le recueil de ces données ce fait grace aux hook \" useEffect \", \" useState \" qui effectue une connexion à l'api, tandis que le transfert des données de composant parent à composant enfant se fait grace au systeme de props du packages React-Navigation. Tous cela est configurés dans la partie script des composants."
                ],
                "img": "",
                "composants":[
                    {
                        "nom": "Accueil.js",
                        "introduction" : [
                            {
                                "nom": "Accueil.js / Page1.js",
                                "text" : [
                                    "Le recueil ainsi que le traitement des données sont identique pour ces deux composants.",
                                    "Pour rappel, le composant Accueil.js représente la 1er couche de navigation, cette 1er couche est ni plus ni moin que la page d'accueil.",
                                    "Le composant Page1.jsx represente la seconde coushe, ce qui reprensente les pages billetterie programme information sponsors et a-propos.",
                                    "Ces deux composant parents sont construit de la même facon avec :",
                                    "- Le composant NavBar qui est La barre de navigation",
                                    "- La section qui traite les données. ",
                                    "- Le composant Footer qui comme sont nom l'indique, le pied de page.",
                                    "Le composant \" Accueil.js \" serat l'exemple pour le reste de la documentation."
                                ]
                            }
                        ],
                        "explication" : [
                            {
                                "titre": "Les données",
                                "puces" : [
                                    {
                                        "text" : [
                                            "Les données sont directement récupérées au moment ou le composant est monté. Cela grace au hook \" useEffect \" qui initialise la connection à l'API et transmet la reponse de la requete à un autre \" useState \".",
                                            "- La const \" views \" recueil les données de toutes les pages (Accueil, information, billeterie ...), et les stocke dans un tableau.",
                                            "- La const \" lieux \" recueil tous les lieux (scene, hotels ...) et les stocke dans un tableau."
                                        ],
                                        "img" : ["/documentation/NS_VersionPhone/Code/Rendu/donees1.png"]
                                    },
                                    {
                                        "text" : [
                                            "Les données sont ensuite filtrées pour ne retenir uniquement celles utiles pour le rendu de cette page.",
                                            "- La var accueilExtractArray filtre le tableau pour garder uniquement la page ayant comme nom 'accueil'",
                                            "- La var data recupère la page accueil, ce serat l'objet qui serat traitré dans le rendu.",
                                            "- La var hotels recupère les hotels, ce serat le tableau d'objet qui serat traitré dans le rendu."
                                        ],
                                        "img" : ["/documentation/NS_VersionPhone/Code/Rendu/donees2.png"]
                                    }
                                ]
                            },
                            {
                                "titre": "Le rendu",
                                "puces" : [
                                    {
                                        "text" : "Dans le rendu nous avons des balise differentes du HTML classique. En effet react native possède son propre language qui utilise une syntaxe similaire à HTML ou XML que l'on appel JSX. C'est ce qui rend par la suite les composants natifs sur les plateformes iOS et Android. Nous observons donc un premier composant qui est la nav bar. Ensuite nous avons la balise \" ScrollView \" qui engloberat à la fois la section qui traitera les données ainsi que le composant Footer. Il est important de comprendre que tous ce qui sont dans la balise ScrollView seront scrolables, tandi que ceux hors de cette balise auront comme particularité d'être fixe à l'ecran. Ainsi notre nav bar resterat toujours fixé en haut de l'ecran.",
                                        "img" : ["/documentation/NS_VersionPhone/Code/Rendu/rendu1.png"]
                                    },
                                    {
                                        "text" : "En ce qui concerne la section qui traite les données, elle est initialisé par un ternaire qui verifie si la var \" data \" est vide ou pas. Dans le premier cas, si elle n'est pas vide, alors les données sont traité. Le Header est initialisé par la balise \" ImageBackground \". Puis chaques sections qui composent la page sont mapées comme sur l'image d'ilustration.",
                                        "img" : [
                                            "/documentation/NS_VersionPhone/Code/Rendu/rendu2.png",
                                            "/documentation/NS_VersionPhone/Code/Rendu/rendu3.png"
                                        ]
                                    },
                                    {
                                        "text" : "Elles sont ensuite traitées une à une en fonction de leur style d'affichage par une ternaire et grace à la propriété ' display ' ( il est possible de choisir un style d'affichage depuis le site PixelEvent ). Pour rappel les sections proviennent du site PixelEvent. L'image ci dessous montrent l'exemple pour le style2.",
                                        "img" : ["/documentation/NS_VersionPhone/Code/Rendu/rendu4.png"]
                                    },
                                    {
                                        "text" : "Dans le cas ou la var \" data \" est vide, la ternaire renvoie un composant \" Loader \" qui est un spiner. Utile pour montré à l'utilisateur que les données sont en chargement.",
                                        "img" : ["/documentation/NS_VersionPhone/Code/Rendu/rendu5.png"]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "nom": "Page2.jsx",
                        "introduction" : [
                            {
                                "nom": "Page2.js",
                                "text" : [
                                    "Page2.jsx représente la troisieme couche de navigation.",
                                    "Ce composant contient :",
                                    "- Le composant NavBar qui est La barre de navigation",
                                    "- La section qui traite les données. ",
                                    "- Le composant Footer qui comme sont nom l'indique, le pied de page."
                                ]
                            }
                        ],
                        "explication" : [
                            {
                                "titre": "Les données",
                                "puces" : [
                                    {
                                        "text" : [
                                            "Les données proviennent directement du composant parent, c'est à dire le dernier composant enfant de page1.js.",
                                            "Prenons l'exemple du composant Card.js, qui affiche la carte de l'evenement dans le programme.",
                                            "Le \" TouchableOpacity \" envoie l'utilisateur vers la route \" Page2 \", avec les paramêtres \" day \",\" episode \", \"artiste\". Ces parametres sont enfet des propriétés qui contiennent les données qui seront transmises dans la route."
                                        ],
                                        "img" : [
                                            "/documentation/NS_VersionPhone/Code/Rendu/donees3.png",
                                            "/documentation/NS_VersionPhone/Code/Rendu/donees4.png"
                                        ]
                                    },
                                    {
                                        "text" : [
                                            "Ces données seront récupérées dans notre composant Page2.js"
                                        ],
                                        "img" : ["/documentation/NS_VersionPhone/Code/Rendu/donees5.png"]
                                    },
                                    {
                                        "text" : [
                                            "Avec ces données nous allons construire l'object \" artisteDetaills \"."
                                        ],
                                        "img" : ["/documentation/NS_VersionPhone/Code/Rendu/donees6.png"]
                                    }
                                ]
                            },
                            {
                                "titre": "Le rendu",
                                "puces" : [
                                    {
                                        "text" : "Une fois cette objet construit nous allons pouvoir dans le rendu construire la conditions pour chargé le composant \" ArtisteDetaills \" en lui transmettant l'objet comme propriété.",
                                        "img" : ["/documentation/NS_VersionPhone/Code/Rendu/rendu6.png"]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        }
    ]
}